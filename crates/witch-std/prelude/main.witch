interface Index[Idx, Output] {
    index: (Idx) -> Output
}

struct Iterator[T, E, O] where T: Index[E, O] {
    
    # Holds the current index for the iterable
    # TODO: Generic over the indexable type, such as keys for maps etc
    cursor: usize

    # The data we are iterating over
    data: T
    
    function next() -> O {
        let value = self.data[self.cursor]
        self.cursor = self.cursor + 1
        return value
    }
}

interface IntoIterator[T] {
    iter: () -> Iterator[T]
}

function iter[T](data: T) -> Iterator[T] {
    return new Iterator {
        cursor: 0,
        data
    }
}

