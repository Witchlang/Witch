struct Iterator[T] {
    
    # Holds the current index for the iterable
    # TODO: Generic over the indexable type, such as keys for maps etc
    cursor: usize

    # The data we are iterating over
    data: List[T]
    
    function next() -> usize {
        let value = self.data[self.cursor]
        self.cursor = self.cursor + 1
        return value
    }
}

function iter[T](data: T) -> Iterator[T] {
    return new Iterator {
        cursor: 0,
        data
    }
}

interface ToString {
    to_string: () -> string
}

function print[T](input: T) -> void where T: ToString {
    let str = input.to_string()
    let c_str = witch_conv_string_to_cstring(str)
    witch_libc_puts(c_str)
}